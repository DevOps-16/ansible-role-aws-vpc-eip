---

###
### Asserts
###

- name: ensure name is defined
  assert:
    that:
      - eip.name is defined
    msg: "aws_vpc_eips[x].name is not defined"


###
### Variables
###

- name: ensure variables are resetted
  set_fact:
    _aws_vpc_eip_tags: []
    _aws_vpc_eip_filter: []

- name: set eip tags
  set_fact:
    _aws_vpc_eip_tags: "[{'key': 'Name', 'val': '{{ eip.name }}'}] + {{ eip.tags | default([]) }}"

- name: set eip filter
  set_fact:
    _aws_vpc_eip_filter: "[{'key': 'tag:{{ item.key }}', 'val': '{{ item.val }}'}] + {{ _aws_vpc_eip_filter | default([]) }}"
  with_items:
    - "{{ _aws_vpc_eip_tags }}"


###
### Check existance
###

- name: gather eip facts by filter
  ec2_eip_facts:
    aws_access_key: "{{ lookup('ENV', 'AWS_ACCESS_KEY') | default(omit) }}"
    aws_secret_key: "{{ lookup('ENV', 'AWS_SECRET_KEY') | default(omit)  }}"
    security_token: "{{ lookup('ENV', 'AWS_SECURITY_TOKEN') | default(omit) }}"
    profile: "{{ aws_vpc_eip_profile | default(omit) }}"
    region: "{{ eip.region | default(aws_vpc_eip_default_region) }}"
    filters: "{{ _aws_vpc_eip_filter | get_attr('key', 'val') }}"
  register: _aws_vpc_eip_facts


###
### create eip if not exist
###
- name: ensure eip is created
  ec2_eip:
    # Fixed values
    state: present
    release_on_disassociation: True
    reuse_existing_ip_allowed: True
    # Optional values
    public_ip: "{{ eip.public_ip | default(omit) }}"
    region: "{{ eip.region | default(aws_vpc_eip_default_region | default(omit)) }}"
    aws_access_key: "{{ lookup('ENV', 'AWS_ACCESS_KEY') | default(omit) }}"
    aws_secret_key: "{{ lookup('ENV', 'AWS_SECRET_KEY') | default(omit)  }}"
    security_token: "{{ lookup('ENV', 'AWS_SECURITY_TOKEN') | default(omit) }}"
    profile: "{{ aws_vpc_eip_profile | default(omit) }}"
  register: _aws_vpc_eip
  when:
    - _aws_vpc_eip_facts.addresses | length == 0

- name: ensure eip tags are created
  ec2_tag:
    # Fixed values
    state: present
    # Looked-up values
    resource: "{{ _aws_vpc_eip.allocation_id }}"
    # Required values
    tags: "{{  _aws_vpc_eip_tags | get_attr('key', 'val') }}"
    # Optional values
    region: "{{ eip.region | default(aws_vpc_eip_default_region | default(omit)) }}"
    aws_access_key: "{{ lookup('ENV', 'AWS_ACCESS_KEY') | default(omit) }}"
    aws_secret_key: "{{ lookup('ENV', 'AWS_SECRET_KEY') | default(omit)  }}"
    security_token: "{{ lookup('ENV', 'AWS_SECURITY_TOKEN') | default(omit) }}"
    profile: "{{ aws_vpc_eip_profile | default(omit) }}"
  when:
    - _aws_vpc_eip_facts.addresses | length == 0
